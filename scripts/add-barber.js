const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addBarber() {
  try {
    // Buscar Barbearia Vintage
    const barbershop = await prisma.barbershop.findFirst({
      where: {
        name: {
          contains: 'Vintage',
          mode: 'insensitive'
        }
      }
    });

    if (!barbershop) {
      console.error('‚ùå Barbearia Vintage n√£o encontrada');
      await prisma.$disconnect();
      return;
    }

    console.log(`\nüìç Barbearia encontrada:`);
    console.log(`   Nome: ${barbershop.name}`);
    console.log(`   ID: ${barbershop.id}`);
    console.log(`   Endere√ßo: ${barbershop.address}\n`);

    const email = 'testebarber0@gmail.com';

    // Buscar ou criar usu√°rio
    let user = await prisma.user.findUnique({
      where: { email }
    });

    if (!user) {
      console.log(`üìù Criando novo usu√°rio com email: ${email}`);
      user = await prisma.user.create({
        data: {
          email,
          name: 'Barbeiro Teste',
          role: 'BARBER'
        }
      });
      console.log(`‚úÖ Usu√°rio criado com sucesso`);
    } else {
      console.log(`üë§ Usu√°rio encontrado: ${user.name || user.email}`);
      
      // Atualizar role se necess√°rio
      if (user.role !== 'BARBER') {
        await prisma.user.update({
          where: { id: user.id },
          data: { role: 'BARBER' }
        });
        console.log(`‚úÖ Role atualizado para BARBER`);
      }
    }

    // Verificar se j√° √© barbeiro
    const existingBarber = await prisma.barber.findUnique({
      where: { userId: user.id }
    });

    if (existingBarber) {
      const currentBarbershop = await prisma.barbershop.findUnique({
        where: { id: existingBarber.barbershopId }
      });
      console.log(`\n‚ö†Ô∏è  Usu√°rio j√° √© barbeiro de: ${currentBarbershop.name}`);
      
      // Atualizar para nova barbearia
      await prisma.barber.update({
        where: { id: existingBarber.id },
        data: { barbershopId: barbershop.id }
      });
      console.log(`‚úÖ Barbearia atualizada para: ${barbershop.name}`);
    } else {
      // Criar novo barbeiro
      await prisma.barber.create({
        data: {
          userId: user.id,
          barbershopId: barbershop.id
        }
      });
      console.log(`‚úÖ Barbeiro criado e vinculado √† ${barbershop.name}`);
    }

    console.log(`\nüéâ Configura√ß√£o conclu√≠da!`);
    console.log(`   Email: ${email}`);
    console.log(`   Barbearia: ${barbershop.name}`);
    console.log(`\nüí° Fa√ßa login com este email via Google OAuth para acessar o dashboard`);

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addBarber();
